Repeated Character

Given a string consisting of lowercase english alphabets. Find the repeated character present first in the string.
Example 1:
Input:
S = "geeksforgeeks"
Output: g
Explanation: g, e, k and s are the repeating
characters. Out of these, g occurs first. 

=================================naive approach===============================
time complexity=o(n^2)
space complexity=o(1)

class Solution
{
    char firstRep(String S)
    {
        // your code here
        
        for(int i=0;i<S.length();i++)
        {
            for(int j=i+1;j<S.length();j++)
            {
                 if(S.charAt(i)==S.charAt(j))
                 return (S.charAt(i));
            }
        }
        return '#'; //returns '#' as a default value.
    }
}

=====================================================better solution==========================
time complexity=o(n)
space complexity=o(256)

class Solution
{  
    int[] str=new int[256];
    char firstRep(String S)
    {
        // your code here
        
        for(int i=0;i<S.length();i++)
        {
         str[S.charAt(i)]++;
        }
        
        for(int i=0;i<S.length();i++)
        {
           if( str[S.charAt(i)]>1)
           {
               return (S.charAt(i));
           }
        }
        
        return '#';
    }
}
==========================================================Efficient approach==========================
time complexity=o(n)
space complexity=o(256)
ONLY IN ONE TRAVERSAL
------------------------
class Solution
{  
    char res='#';
    boolean[] str=new boolean[256];
    char firstRep(String S)
    {
        // your code here
        
        for(int i=S.length()-1;i>=0;i--)
        {
         if(str[S.charAt(i)]==true)
         res=S.charAt(i);
         else
         str[S.charAt(i)]=true;
        }
        
        return res;
    }
}

============================================================
class GFG { 
        static final int CHAR=256;
    static int leftMost(String str) 
    {
    int[] fIndex=new int[CHAR];
    Arrays.fill(fIndex,-1);
    int res=Integer.MAX_VALUE;
    for(int i=0;i<str.length();i++){
        int fi=fIndex[str.charAt(i)];
        if(fi==-1)
        fIndex[str.charAt(i)]=i;
        else
        res=Math.min(res,fi);
    }
    
    return (res==Integer.MAX_VALUE)?-1:res;
    } 