Given two strings S1 and S2 as input, the task is to merge them alternatively i.e. the first character of S1 then the first character of S2 and so on till the strings end.
NOTE: Add the whole string if other string is empty.

Example 1:

Input:
S1 = "Hello" S2 = "Bye"
Output: HBeylelo
Explanation: The characters of both the 
given strings are arranged alternatlively.
â€‹Example 2:

Input: 
S1 = "abc", S2 = "def"
Output: adbecf
Explanation: The characters of both the
given strings are arranged alternatlively.
-----------------------------------------------------
This solution1 is eeficient if an input is arround 256 of size but more input solution 2 is perfect.
Time complexity=O(n)
Space complexity=O(256)


class Solution 
{ 
    String merge(String S1, String S2)
    { 
        // code here
        int index=0;
        char ch[]=new char[256];
        int i=0;
        for(i=0;i<S1.length()&&i<S2.length();i++)
        {
            ch[index++]=S1.charAt(i);
            ch[index++]=S2.charAt(i);
        }
        for(;i<S1.length();i++)
        {
              ch[index++]=S1.charAt(i);
        }
         for(;i<S2.length();i++)
        {
              ch[index++]=S2.charAt(i);
        }
        String string = new String(ch);  

              
                return string;

    }
} 
----------------------------------------------------------------------
Time complexity=O(n)
Space complexity=O(n)
class Solution 
{ 
    String merge(String S1, String S2)
    { 
        // code here
        int index=0;
        char ch[]=new char[256];
        StringBuilder merged=new StringBuilder();
        int i=0;
        for(i=0;i<S1.length()&&i<S2.length();i++)
        {
           merged.append(S1.charAt(i));
             merged.append(S2.charAt(i));
           
        }
        for(;i<S1.length();i++)
        {
           merged.append(S1.charAt(i));
        }
         for(;i<S2.length();i++)
        {
             merged.append(S2.charAt(i));
        }

              
                return merged.toString();


    }
} 