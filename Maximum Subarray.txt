Maximum Subarray
Example 1:

Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: The subarray [4,-1,2,1] has the largest sum 6.
====================================================================solution=================================
time complexity = o(n^2)
space complexity = o(1)


class Solution {
    public int maxSubArray(int[] nums) {
      int n=nums.length;
      int res=nums[0];
   // int res=Integer.MIN_VALUE;
    for(int i=0;i<nums.length;i++)
    { int curr=0;
       for(int j=i;j<nums.length;j++)
        {
            curr+=nums[j];
          res=Math.max(res,curr);

        }
    }
     return res;  
    }
}
==========================================================EFFICIENT SOLUTION========================
time complexity = o(n)
space complexity = o(1)


class Solution{

    // arr: input array
    // n: size of array
    //Function to find the sum of contiguous subarray with maximum sum.
    long maxSubarraySum(int arr[], int n){
        
        // Your code here
        
        long sum=0;
        long res=arr[0];
        for(int i=0;i<n;i++)
        {
            sum=sum+arr[i];
            res=Math.max(res,sum);
            if(sum<0)
            {
                sum=0;
            }
        }
       return res;
        
    }
    
}
