Subarray with given sum(geekforgeeks)

Given an unsorted array A of size N that contains only positive integers, find a continuous sub-array that adds to a given number S and return the left and right index(1-based indexing) of that subarray.

In case of multiple subarrays, return the subarray indexes which come first on moving from left to right.

Note:- You have to return an ArrayList consisting of two elements left and right. In case no such subarray exists return an array consisting of element -1.

Example 1:

Input:
N = 5, S = 12
A[] = {1,2,3,7,5}
Output: 2 4
Explanation: The sum of elements 
from 2nd position to 4th position 
is 12.

====================================================================Naive solution==========================================================================
time complexity =o(n^2)
space complexity=o(1)


class Solution
{
    //Function to find a continuous sub-array which adds up to a given number.
    static ArrayList<Integer> subarraySum(int[] arr, int n, int s) 
    {
        // Your code here
        int start=0;
        int flag=0;
          ArrayList<Integer> result = new ArrayList<Integer>();
        for(int i=0;i<n;i++)
        {
              int curr_value=0;
        for(int j=i;j<n;j++)
        {
         curr_value+=arr[j];

            if(curr_value==s)
            { 
                result.add(i+1);
                 result.add(j+1);
                 flag++;
                break;
            }
        }
        if(flag==1)
        break;
    }
        
     if(result.size()==0)
         result.add(-1);
        return result;    
        
    }
}



=======================================optimal solution ========================================
time complexity =o(n)
space complexity=o(1)


class Solution
{
    //Function to find a continuous sub-array which adds up to a given number.
    static ArrayList<Integer> subarraySum(int[] arr, int n, int s) 
    {
        // Your code here
        int curr_value=0, start=0;
          ArrayList<Integer> result = new ArrayList<Integer>();
        for(int i=0;i<n;i++)
        {
            curr_value+=arr[i];
            while(curr_value>s && start<i)
            {
                curr_value-=arr[start];
                start++;
            }
            if(curr_value==s)
            { 
                result.add(start+1);
                 result.add(i+1);
                break;
            }
        }
        
     if(result.size()==0)
         result.add(-1);
        return result;    
        
    }
}