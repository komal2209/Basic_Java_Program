First Repeating Element
Given an array arr[] of size n, find the first repeating element. The element should occur more than once and the index of its first occurrence should be the smallest.
Note:- The position you return should be according to 1-based indexing. 
Example 1:
Input:
n = 7
arr[] = {1, 5, 3, 4, 3, 5, 6}
Output: 2
Explanation: 
5 is appearing twice and 
its first appearence is at index 2 
which is less than 3 whose first 
occuring index is 3.

Example 2:
Input:
n = 4
arr[] = {1, 2, 3, 4}
Output: -1
Explanation: 
All elements appear only once so 
answer is -1.
---------------------------------------------------------------------------------------Naive Approach----------------------------------------------------------------------

Time Complexity=O(N^2)
SPACE COMPLEXITY=O(1)
class Solution {
    // Function to return the position of the first repeating element.
    public static int firstRepeated(int[] arr, int n) {
        // Your code here
        for(int i=0;i<n;i++)
        {
            for(int j=i+1;j<n;j++)
            {
                if(arr[i]==arr[j])
                {
                    return i+1;
                }
            }
        }
        return -1;
    }
}

-----------------------------------------------------------------------------Efficient Approach------------------------------------------------------
Time Complexity=O(N)
SPACE COMPLEXITY=O(1)

class Solution {
    // Function to return the position of the first repeating element.
    public static int firstRepeated(int[] arr, int n) {
        // Your code here
        HashMap<Integer, Integer> map = new HashMap<>();
        for(int i=0; i<n; i++){
            map.put(arr[i], map.getOrDefault(arr[i], 0)+1);
        }
        
        for(int i=0; i<n; i++){
            if(map.get(arr[i])>1){
                return i+1;
            }
        }
        return -1;
    }
}