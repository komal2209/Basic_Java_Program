Majority Element

Given an array nums of size n, return the majority element.
The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.

Example 1:
Input: nums = [3,2,3]
Output: 3

Example 2:
Input: nums = [2,2,1,1,1,2,2]
Output: 2
=================================================================solution ===========================================
Time complexity =o(n^2)
Space complexity =o(1)

class Solution {
    public int majorityElement(int[] nums) {
      int n=nums.length;
      int temp=nums[0]; int count=1;       
    for(int i=0;i<nums.length;i++)
    {
         count=1;
        for(int j=i+1;j<n;j++)
        {
            if(nums[i]==nums[j])
            {
                count++;
            }
        }
        if(count>n/2)
        {
            temp=nums[i];
        }
    }
    return temp;
    }
}


=====================================================================solution========================================================
Time complexity =o(n)
Space complexity =o(1)

class Solution {
    public int majorityElement(int[] nums) {
      int n=nums.length;
      int temp=nums[0]; int count=1;       
        for(int i=1;i<nums.length;i++)
        {
          if(nums[i]==temp)
          {
              count++;
          }
          else{
              count--;
          }
          if(count==0)
          {
              temp=nums[i];
              count=1;
          }
        }
    return temp;
    }
}