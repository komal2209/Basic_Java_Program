Pattern searching
Given a string str and a pattern pat. You need to check whether the pattern is present or not in the given string. 

Example 1:-

Input:

2
abcdefh
bcd
axzy
xy

Output:
Present
Not present
=======================================================================================================
Time Complexity=O((n-m+1)*m)
space complxity=0(1)
class Solution {
    public static boolean searchPattern(String str, String pat) {
        // code here
        int m= pat.length();
        int n= str.length();
        for(int i=0;i<=(n-m);i++)
        {
            int j;
            for(j=0;j<m;j++)
            {
                if(pat.charAt(j)!=str.charAt(i+j))
                break;
            }
                  if(j==m)
                return true;
            
                
           
        }
        return false;
    }
}

=====================================================================================
Example 1:-

Input:
2
abcdefh
bcd
axzy
xy

Output:
Present
Not present


Time Complexity=O(n)
space complxity=0(1)



class Solution {
    public static boolean searchPattern(String str, String pat) {
        // code here
       return(str.contains(pat));
        
    }
}



=========================================================================================================
Given a text and a pattern, the task is to check if the pattern exists in the text or not.

Example 1:
Input: text = "geeksforgeeks"
       pat = "geek"
Output: 1
Explanation: "geek" exists in
"geeksforgeeks"


Time Complexity=O(n)
space complxity=0(1)

class Solution {
    int search(String text, String pat) {
        
        // code here
        int num=text.indexOf(pat);
        if(num>=0)
        return 1;
        return 0;
    }
};

==========================================================================================
Given a text and a pattern, the task is to check if the pattern exists in the text or not.

Example 1:
Input: text = "geeksforgeeks"
       pat = "geek"
Output: 1
Explanation: "geek" exists in
"geeksforgeeks"

Time Complexity=O((n-m+1)*m)
space complxity=0(1)

class Solution {
    int search(String text, String pat) {
        // code here
        int n=text.length();
        int m=pat.length();
        for(int i=0;i<=(n-m);i++)
        {
            int j;
            for(j=0;j<m;j++)
            {
                if(pat.charAt(j)!=text.charAt(i+j))
                    break;
            }
              if(j==m)
              return 1;
        }
        
        return 0;
    }
}