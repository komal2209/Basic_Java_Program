Distinct Substrings
Given a string s consisting of uppercase and lowercase alphabetic characters. Return the  number of distinct substrings of size 2 that appear in s as contiguous substrings.

Example
Input :
s = "ABCAB"
Output :
3
Explanation:  For "ABCAB", the 
three distinct substrings of size 
2 are "AB", "BC" and "CA". 

Example
Input :
s = "XYZ"
Output :
2
Explanation: For "XYZ", the 
two distinct substrings of size 2 are
"XY" and "YZ".
========================================================
Time Complexity=O(n)
Space Complexity=O(n)

class Solution 
{ 
    int fun(String s) 
    {
        int n=s.length();
        int count=0;
        if(s.length()==1)
        return 0;
        if(s.length()==2)
        {
            if(s.charAt(0)!=s.charAt(1))
            return 1;
            else
            return 0;
        }
        ArrayList<String> temp=new  ArrayList<String>();
        
        // code here
        for(int i=0;i<n;i++)
        {
            for(int j=i;j<n;j++)
            {
               
                       String str = s.substring(i,j+1);
                       if(!temp.contains(str) && str.length()==2)
                       {
                           temp.add(str);
                           count++;
                       }
            }
        }
        
        return count;
    }
} 